commands:
  - tag: insert
    section: writing_data
    order: 0
    description: |
      Insert JSON documents into a table. Accepts a single JSON
      document or an array of documents.  You may also pass the
      optional argument <code>durability</code> with value
      <code>'hard'</code> or <code>'soft'</code>, to override the
      table or query's default durability setting.<br/><br/>
      Insert returns an object that contains the following attributes:
      <ul>
      <li><code>inserted</code> - the number of documents that were succesfully inserted;</li>
      <li><code>replaced</code> - the number of documents that were updated when <code>upsert</code> is used;</li>
      <li><code>unchanged</code> - the number of documents that would have been modified, except that the new
      value was the same as the old value when doing an <code>upsert</code>;</li>
      <li><code>errors</code> - the number of errors encountered while inserting;</li>
      <li>if errors where encountered while inserting, <code>first_error</code> contains the text of the first error;</li>
      <li><code>generated_keys</code> - a list of generated primary key values;</li>
      <li><code>deleted</code> and <code>skipped</code>
      - <code>0</code> for an <code>insert</code> operation.</li>
      </ul>

    body:
      js: json | [json][, {upsert:true}]
      py: json | [json][, upsert=False]
      rb: json | [json][, { :upsert => false }]
    parent: table
    returns: object

    examples:
      - description: Insert a row into a table named 'marvel'.
        code:
          js: |
            r.table('marvel').insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })
             .run(conn, callback)
          py: |
            r.table('marvel').insert(
                { 'superhero': 'Iron Man', 'superpower':'Arc Reactor' }).run(conn)
          rb: |
            r.table('marvel').insert(
                { :superhero => 'Iron Man', :superpower => 'Arc Reactor' }).run(conn)
      - description: Insert multiple rows into a table named 'marvel'.  Also, specify that only soft durability is required.
        code:
          js: |
            r.table('marvel').insert([
              { superhero: 'Wolverine', superpower: 'Adamantium' },
              { superhero: 'Spiderman', superpower: 'spidy sense' }
            ], { durability: 'soft' }).run(conn, callback)
          py: |
            r.table('marvel').insert([
              { 'superhero': 'Wolverine', 'superpower': 'Adamantium' },
              { 'superhero': 'Spiderman', 'superpower': 'spidy sense' }
            ], durability='soft').run(conn)
          rb: |
            r.table('marvel').insert([
              {:superhero => 'Wolverine', :superpower => 'Adamantium'},
              {:superhero => 'Spiderman', :superpower => 'spidy sense'}
            ], :durability => 'soft').run(conn)
      - description: Insert a row into a table named 'marvel', overwriting if the document already exists.
        code:
          js: |
            r.table('marvel').insert(
              { superhero: 'Iron Man', superpower: 'Arc Reactor' },
              {upsert: true}
            ).run(conn, callback)
          py: |
            r.table('marvel').insert(
              { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },
              upsert=True
            ).run(conn)
          rb: |
            r.table('marvel').insert(
              {:superhero => 'Iron Man', :superpower => 'Arc Reactor' },
              {:upsert => true }
            ).run(conn)

