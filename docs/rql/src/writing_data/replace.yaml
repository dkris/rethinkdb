commands:
  - tag: replace
    section: writing_data
    order: 2
    description: |
      Replace documents in a table. Accepts a JSON document or a RQL
      expression, and replaces the original document with the new
      one. The new document must have the same primary key as the
      original document.  The optional argument
      <code>durability</code> with value <code>'hard'</code> or
      <code>'soft'</code> will override the table or query's default
      durability setting.  The optional argument
      <code>non_atomic</code> lets you permit non-atomic updates.<br/><br/>
      Replace returns an object that contains the following attributes:
      <ul>
      <li><code>replaced</code> - the number of documents that were replaced;</li>
      <li><code>unchanged</code> - the number of documents that would have been modified,
      except that the new value was the same as the old value;</li>
      <li><code>inserted</code> - the number of new documents added. You can have new documents
      inserted if you do a point-replace on a key that isn't in the table or you do a replace
      on a selection and one of the documents you are replacing has been deleted;</li>
      <li><code>deleted</code> - the number of deleted documents when doing a replace with null;</li>
      <li><code>errors</code> - the number of errors encountered while performing the replace;</li>
      <li>if errors occurred performing the replace, <code>first_error</code> contains the text of the first error encountered;</li>
      <li><code>skipped</code> - <code>0</code> for a <code>replace</code> operation.</li>
      </ul>

    body: json | expr
    parent: selection
    returns: object

    examples:
      - description: Remove all existing attributes from Superman's document, and add an attribute 'age'.
        code:
          js: |
            r.table('marvel').get('superman').replace({ id: 'superman', age: 30 })
             .run(conn, callback)
          py: "r.table('marvel').get('superman').replace({ 'id': 'superman', 'age': 30 }).run(conn)"
          rb: r.table('marvel').get('superman').replace{ {:id => 'superman', :age => 30} }.run(conn)
      - description: Allow the server to run non-atomic operations.
        code:
          js: |
            r.table('marvel').get('superman').replace({ id: 'superman', age: r.js('30') },
              { 'nonAtomic': true }
            ).run(conn, callback)
          py: |
            r.table('marvel').get('superman').replace(
                { 'id': 'superman', 'age': 30 }, non_atomic=True).run(conn)
          rb: |
            r.table('marvel').get('superman').replace(
               { :non_atomic => true }, {:id => 'superman', :age => 30}).run(conn)
      - description: Mark all Marvel heroes as favorites, specifying soft durability.
        code:
          js: |
            r.table('heroes').filter(r.row('universe').eq('marvel'))
             .replace(function(doc) {return doc.merge({is_fav: true})}, { durability: 'soft' })
             .run(conn, callback)
          py: |
            r.table('heroes').filter(r.row['universe'] == 'marvel').replace(
                lambda hero: hero.merge({'is_fav': True}), durability='soft').run(conn)
          rb: |
            r.table('heroes').filter { |hero| hero[:universe].eq 'marvel'
             }.replace(:durability => 'soft') { |hero| hero.merge(:is_fav => true)
             }.run(conn)

