sections:
  - tag: transformations
    name: Transformations
    description: These commands are used to transform data in a sequence.
    order: 6

commands:
  - tag: map
    section: transformations
    description: Transform each element of the sequence by applying the given mapping
      function.

    body:
      js: mappingFunction
      py: mapping_function
      rb: mapping_function
    parent: sequence
    returns: sequence

    examples:
      - description: Construct a sequence of hero power ratings.
        code:
          js: |-
            r.table('marvel').map(function(hero) {
             return hero('combatPower').add(hero('compassionPower').mul(2))
            }).run(conn, callback)
          py: |-
            r.table('marvel').map(
                lambda hero: hero['combatPower'] + hero['compassionPower'] * 2).run(conn)
          rb: |-
            r.table('marvel').map {|hero|
             hero[:combat_power] + hero[:compassion_power] * 2
            }.run(conn)

  - tag: with_fields
    section: transformations
    description: Takes a sequence of objects and a list of fields.  If any objects in the sequence don't have all of the specified fields, they're dropped from the sequence.  The remaining objects have the specified fields plucked out.  (This is identical to `has_fields` followed by `pluck` on a sequence.)

    name:
      js: withFields
      py: with_fields
      rb: with_fields

    body: field1[, field2...]
    parent: sequence
    returns: sequence

    examples:
      - description: Get a list of heroes and their arch-nemeses, excluding any heroes that lack one.
        code:
          rb: r.table('marvel').with_fields('id', 'nemesis')
          py: r.table('marvel').with_fields('id', 'nemesis')
          js: r.table('marvel').withFields('id', 'nemesis')

  - tag: concat_map
    section: transformations
    description: Flattens a sequence of arrays returned by the <code>mappingFunction</code>
      into a single sequence.

    name:
      js: concatMap
      py: concat_map
      rb: concat_map
    body:
      js: mappingFunction
      py: mapping_function
      rb: mapping_function
    parent: sequence
    returns: sequence

    examples:
      - description: Construct a sequence of all monsters defeated by Marvel heroes.
          Here the field 'defeatedMonsters' is a list that is concatenated to
          the sequence.
        code:
          js: |-
            r.table('marvel').concatMap(function(hero) {
              return hero('defeatedMonsters')
            }).run(conn, callback)
          py: "r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)"
          rb: |-
            r.table('marvel').concat_map {|hero|
              hero[:defeated_monsters]
            }.run(conn)

  - tag: order_by
    section: transformations
    description: Sort the sequence by document values of the given key(s).<br /><br />
      <code>order by</code> defaults to ascending ordering. To explicitly specify
      the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>.

    name:
      js: orderBy
      py: order_by
      rb: order_by
    
    body: key1, [key2...]
    parent: sequence
    returns: sequence

    examples:
      - description: Order our heroes by a series of performance metrics.
        code:
          js: r.table('marvel').orderBy('enemiesVanquished', 'damselsSaved').run(conn, callback)
          py: r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)
          rb: r.table('marvel').order_by(:enemies_vanquished, :damsels_saved).run(conn)
      - description: Let's lead with our best vanquishers by specify descending ordering.
        code:
          js: |-
            r.table('marvel').orderBy(r.desc('enemiesVanquished'), r.asc('damselsSaved'))
             .run(conn, callback)
          py: |-
            r.table('marvel').order_by(
                r.desc('enemies_vanquished'), r.asc('damsels_saved')).run(conn)
          rb: |-
            r.table('marvel').order_by(r.desc(:enemies_vanquished),
                                       r.asc(:damsels_saved)      ).run(conn)

  - tag: skip
    section: transformations
    description: Skip a number of elements from the head of the sequence.

    body: n
    parent: sequence
    returns: sequence

    examples:
      - description: Here in conjunction with `order_by` we choose to ignore the most
            successful heroes.
        code:
          js: r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
          py: r.table('marvel').order_by('successMetric').skip(10).run(conn)
          rb: r.table('marvel').order_by(:success_metric).skip(10).run(conn)

  - tag: limit
    section: transformations
    description: End the sequence after the given number of elements.

    body: n
    parent: sequence
    returns: sequence

    examples:
      - description: Only so many can fit in our Pantheon of heroes.
        code:
          js: r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
          py: r.table('marvel').order_by('belovedness').limit(10).run(conn)
          rb: r.table('marvel').order_by(:belovedness).limit(10).run(conn)

  - tag: slice
    section: transformations
    description: Trim the sequence to within the bounds provided.

    body: startIndex[, endIndex]
    parent: sequence
    returns: sequence

    examples:
      - description: For this fight, we need heroes with a good mix of strength and agility.
        code:
          js: r.table('marvel').orderBy('strength').slice(5, 10).run(conn, callback)
          py: r.table('marvel').order_by('strength')[5:10].run(conn)
          rb: r.table('marvel').order_by(:strength)[5..10].run(conn)

    py:
      name: '[]'
      is_selector: true
      name1: '['
      name2: ']'

    rb:
      name: '[]'
      is_selector: true
      name1: '['
      name2: ']'

  - tag: nth
    section: transformations
    description: Get the nth element of a sequence.

    body: index
    parent: sequence
    returns: json

    examples:
      - description: Select the second element in the array.
        code:
          js: r.expr([1,2,3]).nth(1).run(conn, callback)
          py: r.expr([1,2,3])[1].run(conn)
          rb: r([1,2,3])[1].run(conn)

    py:
      name: '[]'
      is_selector: true
      name1: '['
      name2: ']'

    rb:
      name: '[]'
      is_selector: true
      name1: '['
      name2: ']'

  - tag: indexes_of
    section: transformations
    description: Get the indexes of an element in a sequence. If the argument is a predicate,
      get the indexes of all elements matching it.

    name:
      js: indexesOf
      py: indexes_of
      rb: indexes_of
    body: datum | predicate
    parent: sequence
    returns: sequence

    examples:
      - description: Find the position of the letter 'c'.
        code:
          js: r.expr(['a','b','c']).indexesOf('c').run(conn, callback)
          py: r.expr(['a','b','c']).indexes_of('c').run(conn)
          rb: r(['a','b','c']).indexes_of('c').run(conn)
      - description: Find the popularity ranking of invisible heroes.
        code:
          py: |-
            r.table('marvel').union(r.table('dc')).order_by('popularity').indexes_of(
              r.row['superpowers'].contains('invisibility')
            ).run(conn)
          js: |-
            r.table('marvel').union(r.table('dc')).orderBy('popularity').indexesOf(
              r.row('superpowers').contains('invisibility')
            ).run(conn, callback)
          rb: |-
            r.table('marvel').union(r.table('dc')).order_by(:popularity).indexes_of{
              |row| row[:superpowers].contains('invisibility')
            }.run(conn)

  - tag: is_empty
    section: transformations
    description: Test if a sequence is empty.

    name:
      js: isEmpty
      py: is_empty
      rb: is_empty
    parent: sequence
    returns: json

    examples:
      - description: Are there any documents in the marvel table?
        code:
          js: r.table('marvel').isEmpty().run(conn, callback)
          py: r.table('marvel').is_empty().run(conn)
          rb: r.table('marvel').is_empty().run(conn)

  - tag: union
    section: transformations
    description: Concatenate two sequences.

    body: sequence
    parent: sequence
    returns: sequence

    examples:
      - description: Construct a stream of all heroes.
        code:
          py: r.table('marvel').union(r.table('dc')).run(conn)
          rb: r.table('marvel').union(r.table('dc')).run(conn)
          js: r.table('marvel').union(r.table('dc')).run(conn, callback)

  - tag: sample
    section: transformations
    description: |
      Select a given number of elements from a sequence with uniform random
      distribution. Selection is done without replacement.

    body: number
    parent: sequence
    returns: sequence

    examples:
      - description: Select 3 random heroes.
        code:
          js: r.table('marvel').sample(3).run(conn, callback)
          rb: r.table('marvel').sample(3).run(conn)
          py: r.table('marvel').sample(3).run(conn)

