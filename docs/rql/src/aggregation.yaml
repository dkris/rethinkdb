sections:
  - tag: aggregation
    name: Aggregation
    description: These commands are used to compute smaller values from large sequences.
    order: 7

commands:
  - tag: reduce
    section: aggregation
    description: |
      Produce a single value from a sequence through repeated application
      of a reduction function.<br /><br />
      The <code>reduce</code> function gets invoked repeatedly not only
      for the input values but also for results of previous reduce invocations.
      The type and format of the object that is passed in to reduce must be
      the same with the one returned from reduce.

    body:
      js: "reductionFunction[, base]"
      py: "reduction_function[, base]"
      rb: "[base,] reduction_function"
    parent: sequence
    returns: json

    examples:
      - description: How many enemies have our heroes defeated?
        code:
          js: |-
            r.table('marvel').map(r.row('monstersKilled')).reduce(function(acc, val) {
                return acc.add(val)
            }, 0).run(conn, callback)
          py: |-
            r.table('marvel').map(r.row['monstersKilled']).reduce(
                lambda acc, val: acc + val, 0).run(conn)
          rb: |-
            r.table('marvel').map {|hero| hero['monstersKilled']}.reduce(0) {
                |acc, val| acc + val }.run(conn)

  - tag: count
    section: aggregation
    description: Count the number of elements in the sequence. With a single argument,
      count the number of elements equal to it. If the argument is a function, it is
      equivalent to calling filter before count.

    parent: sequence
    body: [filter]
    returns: number

    examples:
      - description: Just how many super heroes are there?
        code:
          js: r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)
          py: (r.table('marvel').count() + r.table('dc').count()).run(conn)
          rb: (r.table('marvel').count + r.table('dc').count).run(conn)
      - description: Just how many super heroes have invisibility?
        code:
          js: r.table('marvel').concatMap(r.row('superpowers')).count('invisibility').run(conn, callback)
          rb: r.table('marvel').concat_map{ |row| row[:superpowers] }.count('invisibility').run(conn)
          py: r.table('marvel').concat_map(r.row['superpowers']).count('invisibility').run(conn)
      - description: Just how many super heroes have defeated the Sphinx?
        code:
          js: r.table('marvel').count(r.row('monstersKilled').contains('Sphinx')).run(conn, callback)
          py: r.table('marvel').count(r.row['monstersKilled'].contains('Sphinx')).run(conn)
          rb: r.table('marvel').count{ |row| row['monstersKilled'].contains('Sphinx') }.run(conn)

  - tag: distinct
    section: aggregation
    description: Remove duplicate elements from the sequence.

    parent: sequence
    returns: sequence

    examples:
      - description: Which unique villains have been vanquished by marvel heroes?
        code:
          js: |-
            r.table('marvel').concatMap(function(hero) {return hero('villainList')}).distinct()
             .run(conn, callback)
          py: 'r.table(''marvel'').concat_map(lambda hero: hero[''villainList'']).distinct().run(conn)'
          rb: r.table('marvel').concat_map{|hero| hero[:villain_list]}.distinct.run(conn)

    rb:
      dont_need_parenthesis: true

  - tag: groupedmapreduce
    section: aggregation
    description: Partition the sequence into groups based on the <code>grouping</code>
      function. The elements of each group are then mapped using the <code>mapping</code>
      function and reduced using the <code>reduction</code> function.<br /><br /><code>grouped_map_reduce</code>
      is a generalized form of <code>group by</code>.


    name:
      py: grouped_map_reduce
      rb: grouped_map_reduce
      js: groupedMapReduce
    body: grouping, mapping, reduction[, base]
    parent: sequence
    returns: json

    examples:
      - description: It's only fair that heroes be compared against their weight class.
        code:
          js: |-
            r.table('marvel').groupedMapReduce(
              function(hero) { return hero('weightClass')},  // grouping
              function(hero) { return hero.pluck('name', 'strength')},  // mapping
              function(acc, hero) {  // reduction
                return r.branch(acc('strength').lt(hero('strength')), hero, acc)
              },
              {name:'none', strength:0} // reduction base
            ).run(conn, callback)
          py: |-
            r.table('marvel').grouped_map_reduce(
              lambda hero: hero['weightClass'],  # grouping
              lambda hero: hero.pluck('name', 'strength'),  # mapping
              lambda acc, hero: r.branch(acc['strength'] < hero['strength'], hero, acc),
              {'name':'none', 'strength':0}  # base
            ).run(conn)
          rb: |-
            r.table('marvel').grouped_map_reduce(
              lambda {|hero| hero[:weight_class]},  # grouping
              lambda {|hero| hero.pluck(:name, :strength)},  #  mapping
              {:name => 'none', :strength => 0},  # reduction base
              lambda {|acc, hero| r.branch(acc[:strength] < hero[:strength], hero, acc)}
            ).run(conn)



  - tag: group_by
    section: aggregation
    description: Groups elements by the values of the given attributes and then applies
      the given reduction. Though similar to <code>grouped_map_reduce</code>,
      groupby takes a standardized object for specifying the reduction.
      Can be used with a number of predefined common reductions.

    name:
      py: group_by
      rb: group_by
      js: groupBy
    body:
      py: attr1[, attr2...], reduction_object
      rb: attr1[, attr2...], reduction_object
      js: attr1[, attr2...], reductionObject

    parent: sequence
    returns: json

    examples:
      - description: Using a predefined reduction we can easily find the average
            strength of members of each weight class.
        code:
          js: r.table('marvel').groupBy('weightClass', r.avg('strength')).run(conn, callback)
          py: r.table('marvel').group_by('weightClass', r.avg('strength')).run(conn)
          rb: r.table('marvel').group_by(:weight_class, r.avg(:strength)).run(conn)

  - tag: contains
    section: aggregation
    description: Returns whether or not a sequence contains all the specified values.

    body: value1[, value2...]
    parent: sequence
    returns: bool

    examples:
      - description: Iron Man ever fought Superman?
        code:
          rb: r.table('marvel').get('ironman')[:opponents].contains('superman').run(conn)
          py: r.table('marvel').get('ironman')['opponents'].contains('superman').run(conn)
          js: r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
