sections:
  - tag: operators
    name: Math and logic
    description: These commands provide basic math and logic.
    order: 10

commands:
  - tag: add
    section: operators
    description: Sum two numbers, concatenate two strings, or concatenate 2 arrays.

    name:
      js: add
      py: +
      rb: +

    is_operator:  true
    js:
      is_operator: false

    body: number | string | array
    parent: number | string | array
    returns: number | string | array

    examples:
      - description: It's as easy as 2 + 2 = 4.
        code:
          js: r.expr(2).add(2).run(conn, callback)
          py: (r.expr(2) + 2).run(conn)
          rb: (r(2) + 2).run(conn)
      - description: Strings can be concatenated too.
        code:
          js: r.expr("foo").add("bar").run(conn, callback)
          py: (r.expr("foo") + "bar").run(conn)
          rb: (r("foo") + "bar").run(conn)
      - description: Arrays can be concatenated too.
        code:
          js: r.expr(["foo", "bar"]).add("buzz").run(conn, callback)
          py: (r.expr(["foo", "bar"]) + ["buzz"]).run(conn)
          rb: (r(["foo", "bar"]) + ["buzz"]).run(conn)

  - tag: sub
    section: operators
    description: Subtract two numbers.

    name:
      js: sub
      py: '-'
      rb: '-'
    is_operator:  true
    js:
      is_operator: false

    body: number
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 - 2 = 0.
        code:
          js: r.expr(2).sub(2).run(conn, callback)
          py: (r.expr(2) - 2).run(conn)
          rb: (r(2) - 2).run(conn)

  - tag: mul
    section: operators
    description: Multiply two numbers, or make a periodic array.

    name:
      js: mul
      py: '*'
      rb: '*'
    is_operator:  true
    js:
      is_operator: false



    body: number | array
    parent: number | array
    returns: number | array

    examples:
      - description: It's as easy as 2 * 2 = 4.
        code:
          js: r.expr(2).mul(2).run(conn, callback)
          py: (r.expr(2) * 2).run(conn)
          rb: (r(2) * 2).run(conn)
      - description: Arrays can be multiplied by numbers as well.
        code:
          js: r.expr(["This", "is", "the", "song", "that", "never", "ends."]).mul(100).run(conn, callback)
          py: (r.expr(["This", "is", "the", "song", "that", "never", "ends."]) * 100).run(conn)
          rb: (r(["This", "is", "the", "song", "that", "never", "ends."]) * 100).run(conn)

  - tag: div
    section: operators
    description: Divide two numbers.

    name:
      js: div
      py: '/'
      rb: '/'
    is_operator:  true
    js:
      is_operator: false



    body: number
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 / 2 = 1.
        code:
          js: r.expr(2).div(2).run(conn, callback)
          py: (r.expr(2) / 2).run(conn)
          rb: (r(2) / 2).run(conn)

  - tag: mod
    section: operators
    description: Find the remainder when dividing two numbers.

    name:
      js: mod
      py: '%'
      rb: '%'
    is_operator:  true
    js:
      is_operator: false

    body: number
    parent: number
    returns: number

    examples:
      - description: It's as easy as 2 % 2 = 0.
        code:
          js: r.expr(2).mod(2).run(conn, callback)
          py: (r.expr(2) % 2).run(conn)
          rb: (r(2) % 2).run(conn)

  - tag: and
    section: operators
    description: Compute the logical and of two values.

    name:
      js: and
      py: '&'
      rb: '&'
    is_operator:  true
    js:
      is_operator: false


    body: bool
    parent: bool
    returns: bool

    examples:
      - description: True and false anded is false?
        code:
          js: r.expr(true).and(false).run(conn, callback)
          py: (r.expr(True) & False).run(conn)
          rb: (r(true) & false).run(conn)

  - tag: or
    section: operators
    description: Compute the logical or of two values.

    name:
      js: or
      py: '|'
      rb: '|'
    is_operator:  true
    js:
      is_operator: false


    body: bool
    parent: bool
    returns: bool

    examples:
      - description: True or false ored is true?
        code:
          js: r.expr(true).or(false).run(conn, callback)
          py: (r.expr(True) | False).run(conn)
          rb: (r.expr(true) | false).run(conn)

  - tag: eq
    section: operators
    description: Test if two values are equal.

    name:
      js: eq
      py: '=='
      rb: eq
    is_operator:  true
    js:
      is_operator: false

    body: other
    parent: json
    returns: bool

    examples:
      - description: Does 2 equal 2?
        code:
          js: r.expr(2).eq(2).run(conn, callback)
          py: (r.expr(2) == 2).run(conn)
          rb: (r.expr(2).eq 2).run(conn)

  - tag: ne
    section: operators
    description: Test if two values are not equal.

    name:
      js: ne
      py: '!='
      rb: ne
    is_operator:  true
    js:
      is_operator: false



    body: other
    parent: json
    returns: bool

    examples:
      - description: Does 2 not equal 2?
        code:
          js: r.expr(2).ne(2).run(conn, callback)
          py: (r.expr(2) != 2).run(conn)
          rb: (r.expr(2).ne 2).run(conn)

  - tag: gt
    section: operators
    description: Test if the first value is greater than other.

    name:
      js: gt
      py: '>'
      rb: '>'
    is_operator:  true
    js:
      is_operator: false


    body: other
    parent: json
    returns: bool

    examples:
      - description: Is 2 greater than 2?
        code:
          js: r.expr(2).gt(2).run(conn, callback)
          py: (r.expr(2) > 2).run(conn)
          rb: (r.expr(2) > 2).run(conn)

  - tag: ge
    section: operators
    description: Test if the first value is greater than or equal to other.

    name:
      js: ge
      py: '>='
      rb: '>='
    is_operator:  true
    js:
      is_operator: false


    body: other
    parent: json
    returns: bool

    examples:
      - description: Is 2 greater than or equal to 2?
        code:
          js: r.expr(2).ge(2).run(conn, callback)
          py: (r.expr(2) >= 2).run(conn)
          rb: (r(2) >= 2).run(conn)

  - tag: lt
    section: operators
    description: Test if the first value is less than other.

    name:
      js: lt
      py: '<'
      rb: '<'
    is_operator:  true
    js:
      is_operator: false



    body: other
    parent: json
    returns: bool

    examples:
      - description: Is 2 less than 2?
        code:
          js: r.expr(2).lt(2).run(conn, callback)
          py: (r.expr(2) < 2).run(conn)
          rb: (r.expr(2) < 2).run(conn)

  - tag: le
    section: operators
    description: Test if the first value is less than or equal to other.

    name:
      js: le
      py: '<='
      rb: '<='
    is_operator:  true
    js:
      is_operator: false


    body: other
    parent: json
    returns: bool

    examples:
      - description: Is 2 less than or equal to 2?
        code:
          js: r.expr(2).le(2).run(conn, callback)
          py: (r.expr(2) <= 2).run(conn)
          rb: (r.expr(2) <= 2).run(conn)

  - tag: not
    section: operators
    description: Compute the logical inverse (not).

    name:
      js: not
      py: '~'
      rb: not
    is_operator:  true
    js:
      is_operator: false


    parent: bool
    returns: bool

    examples:
      - description: Not true is false.
        code:
          js: r.expr(true).not().run(conn, callback)
          py: (~r.expr(True)).run(conn)
          rb: r(true).not.run(conn)

    rb:
      dont_need_parenthesis: true

    py:
      operator_first: true

