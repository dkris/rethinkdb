desc: Tests that manipulation data in tables
tests:

    # Set up some data
    - cd: r.db('test').table_create('test1')
      ot: ({'created':1})
      def: tbl = r.db('test').table('test1')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})
      def: tbl2 = r.db('test').table('test2')

    - py: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'a':i%4});
            }
            return res;
        }())
      rb: tbl.insert((0..99).map{ |i| { :id => i, :a => i % 4 } })
      ot: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})

    - py: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)])
      js: |
        tbl2.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'b':i%4});
            }
            return res;
        }())
      rb: tbl2.insert((0..99).map{ |i| { :id => i, :b => i % 4 } })
      ot: ({'deleted':0.0,'replaced':0.0,'unchanged':0.0,'errors':0.0,'skipped':0.0,'inserted':100})

    # Map-Reduce
    - py:
        - tbl.map(lambda row:row['id']).reduce(lambda a,b:a+b)
        - tbl.map(r.row['id']).reduce(lambda a,b:a+b)
      js:
        - tbl.map(function(row) { return row('id'); }).reduce(function(a,b) { return a.add(b); })
        - tbl.map(r.row('id')).reduce(function(a,b) { return a.add(b); })
      rb: tbl.map{ |row| row[:id] }.reduce{ |a, b| a + b }
      ot: 4950

    # Concat-map
    - py: tbl.concat_map(lambda row:[])
      js: tbl.concatMap(function(row) { return []; })
      rb: tbl.concat_map{ |row| [] }
      ot: ([])
    - def:
        py: ccm = tbl.concat_map(lambda row:[row['a'], (row['a'] + 1) % 4])
        js: ccm = tbl.concatMap(function(row) { return [row('a'), row('a').add(1).mod(4)]; })
        rb: ccm = tbl.concat_map{ |row| [row[:a], (row[:a] + 1) % 4] }
    - cd: ccm.count()
      ot: 200
    - py: ccm.reduce(lambda a,b:(a+b) % 4)
      js: ccm.reduce(function(a,b) { return a.add(b).mod(4); })
      rb: ccm.reduce{ |a, b| (a + b) % 4 }
      ot: 0

    # Order by
    - py: tbl.order_by('id')[0]
      js: tbl.orderBy('id').nth(0)
      rb: tbl.order_by(:id)[0]
      ot: ({'id':0, 'a':0})

    - cd: tbl.order_by('a', 'id').nth(0)
      ot: ({'id':0,'a':0})

    - cd: tbl.order_by(r.desc('a'), r.asc('id')).nth(0)
      ot: ({'id':3,'a':3})

    - cd: tbl.order_by(r.asc('a'), r.desc('id')).nth(0)
      ot: ({'id':96,'a':0})

    - cd: tbl.order_by('id').type_of()
      ot: "'SELECTION'"

    - cd: tbl.order_by('missing').order_by('id').nth(0)
      ot: ({'id':0, 'a':0})

    - cd: tbl.order_by('id', 'missing').nth(0)
      ot: ({'id':0, 'a':0})


    # test skip
    - cd: tbl.skip(1).count()
      ot: 99
    - cd: tbl.skip(-1).count()
      ot: err('RqlRuntimeError', 'Cannot use a negative left index on a stream.', [0])
    - cd: tbl.skip('foo').count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found STRING.', [0])

    # test limit
    - cd: tbl.limit(1).count()
      ot: 1
    - cd: tbl.limit(-1).count()
      ot: err('RqlRuntimeError', 'LIMIT takes a non-negative argument (got -1)', [0])
    - cd: tbl.limit('foo').count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found STRING.', [0])

    # test slice
    - cd: tbl.slice(1, 3).count()
      ot: 3
    - cd: tbl.slice(-1, -3).count()
      ot: err('RqlRuntimeError', 'Cannot use a negative left index on a stream.', [0])
    - cd: tbl.slice(0, -3).count()
      ot: err('RqlRuntimeError', 'Cannot use a right index < -1 on a stream', [0])
    - cd: tbl.slice(0, -1).count()
      ot: 100
    - cd: tbl.slice('foo', 'bar').count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found STRING.', [0])
    - cd: tbl.slice(1, null).count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found NULL.', [0])
    - cd: tbl.slice(null, 1).count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found NULL.', [0])

    # test nth
    - cd: tbl.order_by('id').nth(1)
      ot: ({'id':1,'a':1})
    - cd: tbl.order_by('id').nth(-1)
      ot: ({'id':99,'a':3})
    - cd: tbl.order_by('id').nth('foo').count()
      ot: err('RqlRuntimeError', 'Expected type NUMBER but found STRING.', [0])

    # test is_empty
    - cd: tbl.is_empty()
      ot: false
    - cd: tbl.limit(0).is_empty()
      ot: true
    - cd: r.expr(1).is_empty()
      ot: err('RqlRuntimeError', 'Cannot convert NUMBER to SEQUENCE', [])
    - cd: r.expr("").is_empty()
      ot: err('RqlRuntimeError', 'Cannot convert STRING to SEQUENCE', [])

    # Pluck
    - cd: tbl.pluck().nth(0)
      ot: ({}) # XXX: empty object seems to match anything

    - cd: tbl.pluck('id').order_by('id').nth(0)
      ot: ({'id':0})

    - cd: tbl.pluck('id', 'a').order_by('id').nth(0)
      ot: ({'id':0,'a':0})

    - cd: tbl.pluck('id', 'missing').order_by('id').nth(0)
      ot: ({'id':0})

    # without
    - cd: tbl.without().order_by('id').nth(0)
      ot: ({'id':0,'a':0})

    - cd: tbl.without('a').order_by('id').nth(0)
      ot: ({'id':0})

    - cd: tbl.without('id', 'a').nth(0)
      ot: ({})

    - cd: tbl.without('a', 'missing').order_by('id').nth(0)
      ot: ({'id':0})

    # Coerce a table to an array
    - cd: tbl.limit(5).type_of()
      ot: '"SELECTION"'

    - cd: tbl.limit(5).coerce_to('array').type_of()
      ot: '"ARRAY"'

    # Union
    - cd: tbl.union(tbl2).count()
      ot: 200
    - cd: tbl.union([1,2,3]).count()
      ot: 103
    - cd: r.expr([1,2,3]).union(tbl2).count()
      ot: 103

    ## Indexes Of
    - def: ord = tbl.order_by('id')
      js: ord.indexesOf(r.row('id').lt(2))
      py: ord.indexes_of(r.row['id'] < 2)
      rb: ord.indexes_of{ |row| row['id'] < 2 }
      ot: [0,1]

    - cd: r.expr([1,2,3,4]).indexes_of(3)
      ot: [2]

    - cd: r.expr([1]).indexes_of(tbl)
      ot: err('RqlRuntimeError', 'Expected type DATUM but found TABLE.', [])

    - py: "r.expr(1).do(lambda x: r.expr([2,1,0]).indexes_of(x))"
      js: r.expr(1).do(function(x){ return r.expr([2,1,0]).indexes_of(x); })
      rb: r(1).do{ |x| r([2,1,0]).indexes_of x }
      ot: [1]

    # Contains
    - cd: tbl.contains(tbl[0])
      js: tbl.contains(tbl.nth(0))
      ot: true
    - cd: tbl.contains(tbl[0].pluck('id'))
      js: tbl.contains(tbl.nth(0).pluck('id'))
      ot: false

    # Difference
    - rb: tbl.map{|x| x['a']}.difference([0,1,2,3]).count()
      ot: 0

    - rb: tbl.map{|x| x['a']}.difference([0,1,2]).nth(0)
      ot: 3

    # Clean up
    - cd: r.db('test').table_drop('test1')
      ot: ({'dropped':1})
    - cd: r.db('test').table_drop('test2')
      ot: ({'dropped':1})
